{"version":3,"sources":["GridRow.js","App.js","index.js"],"names":["GridRow","props","useState","editModeEnabled","setEditModeEnabled","user","savedUser","setSavedUser","editingUser","setEditingUser","deleteUserModalActive","setDeleteUserModalActive","onEnterPress","e","keyCode","which","onSaveButtonClick","onCancelButtonClick","onEditButtonClick","handleShowModal","handleCloseModal","handleDeleteButtonClick","deleteUser","id","type","value","name","onChange","target","onKeyPress","email","address","street","suite","city","zipcode","phone","website","company","className","onClick","href","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","App","users","setUsers","isLoading","setIsLoading","addUserModalActive","setAddUserModalActive","setName","setEmail","setCompany","loadUsers","axios","method","url","then","response","data","addUser","updatedUsers","unshift","uuidv4","userId","filter","el","length","class","disabled","trim","map","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.acf9584b.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nfunction GridRow(props) {\n    const [editModeEnabled, setEditModeEnabled] = useState(false);\n    const [savedUser, setSavedUser] = useState(props.user);\n    const [editingUser, setEditingUser] = useState(props.user);\n    const [deleteUserModalActive, setDeleteUserModalActive] = useState(false);\n\n    const onEnterPress = (e) => {\n        let code = e.keyCode || e.which;\n        if (code === 13)\n            onSaveButtonClick();\n    };\n\n    const onSaveButtonClick = () => {\n        setSavedUser(editingUser);\n        setEditModeEnabled(false);\n    };\n\n    const onCancelButtonClick = () => {\n        setEditModeEnabled(false);\n    };\n\n    const onEditButtonClick = () => {\n        setEditingUser(savedUser);\n        setEditModeEnabled(true);\n    };\n\n    const handleShowModal = () => {\n        setDeleteUserModalActive(true);\n    };\n\n    const handleCloseModal = () => {\n        setDeleteUserModalActive(false);\n    };\n\n    const handleDeleteButtonClick = () => {\n        props.deleteUser(props.user.id);\n        setDeleteUserModalActive(false);\n    };\n\n    const renderEditModeCells = () =>\n        <>\n            <td>\n                <input type=\"text\"\n                       value={editingUser.name}\n                       onChange={e => setEditingUser({...editingUser, name: e.target.value})}\n                       onKeyPress={onEnterPress}/>\n            </td>\n            <td>\n                <input type=\"text\"\n                       value={editingUser.email}\n                       onChange={e => setEditingUser({...editingUser, email: e.target.value})}\n                       onKeyPress={onEnterPress}/>\n            </td>\n            <td>\n                <table>\n                    <tr>\n                        <td><strong>Street: </strong></td>\n                        <td>\n                            <input type=\"text\"\n                                   value={editingUser.address.street}\n                                   onChange={e => setEditingUser({\n                                       ...editingUser,\n                                       address: {...editingUser.address, street: e.target.value}\n                                   })}\n                                   onKeyPress={onEnterPress}/>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td><strong>Suite: </strong></td>\n                        <td>\n                            <input type=\"text\"\n                                   value={editingUser.address.suite}\n                                   onChange={e => setEditingUser({\n                                       ...editingUser,\n                                       address: {...editingUser.address, suite: e.target.value}\n                                   })}\n                                   onKeyPress={onEnterPress}/>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td><strong>City: </strong></td>\n                        <td>\n                            <input type=\"text\"\n                                   value={editingUser.address.city}\n                                   onChange={e => setEditingUser({\n                                       ...editingUser,\n                                       address: {...editingUser.address, city: e.target.value}\n                                   })}\n                                   onKeyPress={onEnterPress}/>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td><strong>Zip: </strong></td>\n                        <td>\n                            <input type=\"text\"\n                                   value={editingUser.address.zipcode}\n                                   onChange={e => setEditingUser({\n                                       ...editingUser,\n                                       address: {...editingUser.address, zipcode: e.target.value}\n                                   })}\n                                   onKeyPress={onEnterPress}/>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n            <td>\n                <input type=\"text\"\n                       value={editingUser.phone}\n                       onChange={e => setEditingUser({...editingUser, phone: e.target.value})}\n                       onKeyPress={onEnterPress}/>\n            </td>\n            <td>\n                <input type=\"text\"\n                       value={editingUser.website}\n                       onChange={e => setEditingUser({...editingUser, website: e.target.value})}\n                       onKeyPress={onEnterPress}/>\n            </td>\n            <td>\n                <input type=\"text\"\n                       value={editingUser.company.name}\n                       onChange={e => setEditingUser({\n                           ...editingUser,\n                           company: {...editingUser.company, name: e.target.value}\n                       })}\n                       onKeyPress={onEnterPress}/>\n            </td>\n            <td>\n                <button className=\"btn btn-sm btn-light fa fa-check mr-2\" onClick={onSaveButtonClick}/>\n                <button type=\"button\" className=\"btn btn-sm btn-light fa fa-times\" onClick={onCancelButtonClick}/>\n            </td>\n        </>\n    ;\n\n    const renderReadOnlyModeCells = () =>\n        <>\n            <td>{savedUser.name}</td>\n            <td><a href={`mailto:${savedUser.email}`}>{savedUser.email}</a></td>\n            <td>\n                <strong>Street:</strong> {savedUser.address.street}<br/>\n                <strong>Suite:</strong> {savedUser.address.suite}<br/>\n                <strong>City:</strong> {savedUser.address.city}<br/>\n                <strong>Zip:</strong> {savedUser.address.zipcode}\n            </td>\n            <td>{savedUser.phone}</td>\n            <td><a href={`http://${savedUser.website}`}>{savedUser.website}</a></td>\n            <td>{savedUser.company.name}</td>\n            <td>\n                <button className=\"btn btn-sm btn-light fa fa-pencil mr-2\" onClick={onEditButtonClick}/>\n                <button className=\"btn btn-sm btn-light fa fa-trash\" onClick={handleShowModal}/>\n                <Modal show={deleteUserModalActive} onHide={handleCloseModal}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Are you sure you want to delete user?</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{props.user.name}</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={handleDeleteButtonClick}>OK</Button>\n                        <Button variant=\"secondary\" onClick={handleCloseModal}>Cancel</Button>\n                    </Modal.Footer>\n                </Modal>\n            </td>\n        </>;\n\n    return (\n        <tr>\n            {editModeEnabled ? renderEditModeCells() : renderReadOnlyModeCells()}\n        </tr>\n    );\n}\n\nexport default GridRow;","import React, {useState} from 'react';\nimport axios from 'axios';\nimport GridRow from \"./GridRow\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport {v4 as uuidv4} from 'uuid';\n\nfunction App() {\n    const [users, setUsers] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [addUserModalActive, setAddUserModalActive] = useState(false);\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [company, setCompany] = useState('');\n\n    const loadUsers = () => {\n        setIsLoading(true);\n        axios({\n            method: 'get',\n            url: 'https://jsonplaceholder.typicode.com/users',\n        })\n            .then((response) => {\n                setUsers(response.data);\n                setIsLoading(false);\n            });\n    };\n\n    const renderLoadUsersButton = () =>\n        <button className=\"btn btn-primary mb-3\" onClick={loadUsers}>\n            {isLoading\n                ?\n                <>\n                    <span class=\"spinner-border spinner-border-sm\"/>\n                    Loading...\n                </>\n                : 'Load Users'}\n        </button>;\n\n    const renderAddUserButton = () =>\n        <>\n            <button className=\"btn btn-primary mr-2 mb-3\" onClick={handleShowModal}>Add User</button>\n            <Modal show={addUserModalActive} onHide={handleCloseModal}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add user</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <table>\n                        <tr>\n                            <td><strong>Name*: </strong></td>\n                            <td><input type=\"text\" onChange={e => setName(e.target.value)}/></td>\n                        </tr>\n                        <tr>\n                            <td><strong>Email*: </strong></td>\n                            <td><input type=\"text\" onChange={e => setEmail(e.target.value)}/></td>\n                        </tr>\n                        <tr>\n                            <td><strong>Company*: </strong></td>\n                            <td><input type=\"text\" onChange={e => setCompany(e.target.value)}/></td>\n                        </tr>\n                    </table>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={addUser}\n                            disabled={name.trim().length < 3 || email.trim().length < 3 || company.trim().length < 3}>\n                        OK\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleCloseModal}>Cancel</Button>\n                </Modal.Footer>\n            </Modal>\n        </>;\n\n    const handleShowModal = () => {\n        setAddUserModalActive(true);\n        setName('');\n        setEmail('');\n        setCompany('');\n    };\n\n    const handleCloseModal = () => {\n        setAddUserModalActive(false);\n    };\n\n    const addUser = () => {\n        handleCloseModal();\n        const updatedUsers = [...users];\n        updatedUsers.unshift(\n            {\n                id: uuidv4(),\n                name: name,\n                email: email,\n                address: {\n                    street: null,\n                    suite: null,\n                    city: null,\n                    zipcode: null,\n                },\n                phone: null,\n                website: null,\n                company: {\n                    name: company\n                }\n            });\n        setUsers(updatedUsers);\n    };\n\n    const deleteUser = (userId) => {\n        const updatedUsers = users.filter(el => el.id !== userId);\n        setUsers(updatedUsers);\n    };\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Users</h2>\n\n            {users.length === 0 ? renderLoadUsersButton() : renderAddUserButton()}\n\n            <table className=\"table table-bordered\">\n                {\n                    users.length !== 0 &&\n                    <thead className=\"thead-light\">\n                    <tr>\n                        <th>Name</th>\n                        <th>Email</th>\n                        <th>Address</th>\n                        <th>Phone</th>\n                        <th>Website</th>\n                        <th>Company</th>\n                        <th/>\n                    </tr>\n                    </thead>\n                }\n\n                <tbody>\n                {\n                    users.map(user =>\n                        <GridRow key={user.id}\n                                 user={user}\n                                 deleteUser={deleteUser}/>\n                    )\n                }\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);"],"sourceRoot":""}