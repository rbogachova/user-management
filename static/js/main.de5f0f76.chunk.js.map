{"version":3,"sources":["GridRow.js","AddUserModal.js","App.js","index.js"],"names":["GridRow","props","useState","editModeEnabled","setEditModeEnabled","user","savedUser","setSavedUser","editingUser","setEditingUser","deleteUserModalActive","setDeleteUserModalActive","onEnterPress","e","keyCode","which","onSaveButtonClick","onCancelButtonClick","onEditButtonClick","handleShowModal","handleCloseModal","handleDeleteButtonClick","deleteUser","id","type","value","name","onChange","target","onKeyPress","email","className","address","street","suite","city","zipcode","phone","website","company","onClick","href","isTextEmpty","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","AddUserModal","setName","setEmail","companyName","setCompanyName","isAddUserModalActive","addUser","disabled","trim","length","App","emptyFilters","users","setUsers","isLoading","setIsLoading","setIsAddUserModalActive","filters","setFilters","filteredUsers","setFilteredUsers","loadUsers","axios","method","url","then","response","data","updatedUsers","unshift","uuidv4","userId","filter","el","resetFilters","text","undefined","filterMatches","filterText","toLowerCase","includes","filterUsers","property","updatedFilters","map","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de5f0f76.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nfunction GridRow(props) {\n    const [editModeEnabled, setEditModeEnabled] = useState(false);\n    const [savedUser, setSavedUser] = useState(props.user);\n    const [editingUser, setEditingUser] = useState(props.user);\n    const [deleteUserModalActive, setDeleteUserModalActive] = useState(false);\n\n    const onEnterPress = (e) => {\n        let code = e.keyCode || e.which;\n        if (code === 13)\n            onSaveButtonClick();\n    };\n\n    const onSaveButtonClick = () => {\n        setSavedUser(editingUser);\n        setEditModeEnabled(false);\n    };\n\n    const onCancelButtonClick = () => {\n        setEditModeEnabled(false);\n    };\n\n    const onEditButtonClick = () => {\n        setEditingUser(savedUser);\n        setEditModeEnabled(true);\n    };\n\n    const handleShowModal = () => {\n        setDeleteUserModalActive(true);\n    };\n\n    const handleCloseModal = () => {\n        setDeleteUserModalActive(false);\n    };\n\n    const handleDeleteButtonClick = () => {\n        props.deleteUser(props.user.id);\n        setDeleteUserModalActive(false);\n    };\n\n    const renderEditModeCells = () =>\n        <>\n            <td>\n                <input type=\"text\"\n                       value={editingUser.name}\n                       onChange={e => setEditingUser({...editingUser, name: e.target.value})}\n                       onKeyPress={onEnterPress}/>\n            </td>\n            <td>\n                <input type=\"text\"\n                       value={editingUser.email}\n                       onChange={e => setEditingUser({...editingUser, email: e.target.value})}\n                       onKeyPress={onEnterPress}/>\n            </td>\n            <td>\n                <table className=\"table-borderless\">\n                    <tbody>\n                    <tr>\n                        <td><strong>Street: </strong></td>\n                        <td>\n                            <input type=\"text\"\n                                   value={editingUser.address.street}\n                                   onChange={e => setEditingUser({\n                                       ...editingUser,\n                                       address: {...editingUser.address, street: e.target.value}\n                                   })}\n                                   onKeyPress={onEnterPress}/>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td><strong>Suite: </strong></td>\n                        <td>\n                            <input type=\"text\"\n                                   value={editingUser.address.suite}\n                                   onChange={e => setEditingUser({\n                                       ...editingUser,\n                                       address: {...editingUser.address, suite: e.target.value}\n                                   })}\n                                   onKeyPress={onEnterPress}/>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td><strong>City: </strong></td>\n                        <td>\n                            <input type=\"text\"\n                                   value={editingUser.address.city}\n                                   onChange={e => setEditingUser({\n                                       ...editingUser,\n                                       address: {...editingUser.address, city: e.target.value}\n                                   })}\n                                   onKeyPress={onEnterPress}/>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td><strong>Zip: </strong></td>\n                        <td>\n                            <input type=\"text\"\n                                   value={editingUser.address.zipcode}\n                                   onChange={e => setEditingUser({\n                                       ...editingUser,\n                                       address: {...editingUser.address, zipcode: e.target.value}\n                                   })}\n                                   onKeyPress={onEnterPress}/>\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n            </td>\n            <td>\n                <input type=\"text\"\n                       value={editingUser.phone}\n                       onChange={e => setEditingUser({...editingUser, phone: e.target.value})}\n                       onKeyPress={onEnterPress}/>\n            </td>\n            <td>\n                <input type=\"text\"\n                       value={editingUser.website}\n                       onChange={e => setEditingUser({...editingUser, website: e.target.value})}\n                       onKeyPress={onEnterPress}/>\n            </td>\n            <td>\n                <input type=\"text\"\n                       value={editingUser.company.name}\n                       onChange={e => setEditingUser({\n                           ...editingUser,\n                           company: {...editingUser.company, name: e.target.value}\n                       })}\n                       onKeyPress={onEnterPress}/>\n            </td>\n            <td className=\"text-nowrap\">\n                <button className=\"btn btn-sm btn-light fa fa-check mr-2\" onClick={onSaveButtonClick}/>\n                <button type=\"button\" className=\"btn btn-sm btn-light fa fa-times\" onClick={onCancelButtonClick}/>\n            </td>\n        </>\n    ;\n\n    const renderReadOnlyModeCells = () =>\n        <>\n            <td>{savedUser.name}</td>\n            <td><a href={`mailto:${savedUser.email}`}>{savedUser.email}</a></td>\n            <td>\n                {savedUser.address.street} {savedUser.address.suite}<br/>\n                {\n                    !props.isTextEmpty(savedUser.address.city) && !props.isTextEmpty(savedUser.address.zipcode)\n                        ?\n                        <>\n                            {savedUser.address.city}, {savedUser.address.zipcode}\n                        </>\n                        :\n                        <>\n                            {savedUser.address.city} {savedUser.address.zipcode}\n                        </>\n                }\n            </td>\n            <td>{savedUser.phone}</td>\n            <td><a href={`http://${savedUser.website}`}>{savedUser.website}</a></td>\n            <td>{savedUser.company.name}</td>\n            <td className=\"text-nowrap\">\n                <button className=\"btn btn-sm btn-light fa fa-pencil mr-2\" onClick={onEditButtonClick}/>\n                <button className=\"btn btn-sm btn-light fa fa-trash\" onClick={handleShowModal}/>\n                <Modal show={deleteUserModalActive} onHide={handleCloseModal}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Are you sure you want to delete user?</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{savedUser.name}</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={handleDeleteButtonClick}>OK</Button>\n                        <Button variant=\"secondary\" onClick={handleCloseModal}>Cancel</Button>\n                    </Modal.Footer>\n                </Modal>\n            </td>\n        </>;\n\n    return (\n        <tr>\n            {editModeEnabled ? renderEditModeCells() : renderReadOnlyModeCells()}\n        </tr>\n    );\n}\n\nexport default GridRow;","import React, {useState} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nfunction AddUserModal(props) {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [companyName, setCompanyName] = useState('');\n\n    const handleCloseModal = () => {\n        props.handleCloseModal();\n        setName('');\n        setEmail('');\n        setCompanyName('');\n    };\n\n    const handleAddUser = () => {\n        handleCloseModal();\n        props.addUser(name, email, companyName);\n    };\n\n    return (\n        <Modal show={props.isAddUserModalActive} onHide={handleCloseModal}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add user</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <table>\n                    <tbody>\n                    <tr>\n                        <td><strong>Name*: </strong></td>\n                        <td><input type=\"text\" onChange={e => setName(e.target.value)}/></td>\n                    </tr>\n                    <tr>\n                        <td><strong>Email*: </strong></td>\n                        <td><input type=\"text\" onChange={e => setEmail(e.target.value)}/></td>\n                    </tr>\n                    <tr>\n                        <td><strong>Company*: </strong></td>\n                        <td><input type=\"text\" onChange={e => setCompanyName(e.target.value)}/></td>\n                    </tr>\n                    </tbody>\n                </table>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={handleAddUser}\n                        disabled={name.trim().length < 3 || email.trim().length < 3 || companyName.trim().length < 3}>\n                    OK\n                </Button>\n                <Button variant=\"secondary\" onClick={handleCloseModal}>Cancel</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default AddUserModal;","import React, {useState} from 'react';\nimport axios from 'axios';\nimport GridRow from \"./GridRow\";\nimport AddUserModal from \"./AddUserModal\";\nimport {v4 as uuidv4} from 'uuid';\n\nfunction App() {\n    const userNamePropertyName = 'name';\n    const userEmailPropertyName = 'email';\n    const userAddressPropertyName = 'address';\n    const userPhonePropertyName = 'phone';\n    const userWebsitePropertyName = 'website';\n    const userCompanyPropertyName = 'company';\n\n    const emptyFilters = {\n        [userNamePropertyName]: '',\n        [userEmailPropertyName]: '',\n        [userAddressPropertyName]: '',\n        [userPhonePropertyName]: '',\n        [userWebsitePropertyName]: '',\n        [userCompanyPropertyName]: ''\n    };\n\n    const [users, setUsers] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isAddUserModalActive, setIsAddUserModalActive] = useState(false);\n    const [filters, setFilters] = useState(emptyFilters);\n    const [filteredUsers, setFilteredUsers] = useState(users);\n\n    const loadUsers = () => {\n        setIsLoading(true);\n        axios({\n            method: 'get',\n            url: 'https://jsonplaceholder.typicode.com/users',\n        })\n            .then((response) => {\n                setUsers(response.data);\n                setFilteredUsers(response.data);\n                setIsLoading(false);\n            });\n    };\n\n    const renderLoadUsersButton = () =>\n        <button className=\"btn btn-primary mb-3\" onClick={loadUsers}>\n            {isLoading\n                ?\n                <>\n                    <span className=\"spinner-border spinner-border-sm\"/>\n                    Loading...\n                </>\n                : 'Load Users'}\n        </button>;\n\n    const renderAddUserButton = () =>\n        <>\n            <button className=\"btn btn-primary mr-2 mb-3\" onClick={handleShowModal}>Add User</button>\n            <button className=\"btn btn-secondary mb-3\" onClick={resetFilters}>Reset all filters</button>\n            <AddUserModal addUser={addUser}\n                          isAddUserModalActive={isAddUserModalActive}\n                          handleCloseModal={handleCloseModal}/>\n        </>;\n\n    const handleShowModal = () => {\n        setIsAddUserModalActive(true);\n    };\n\n    const addUser = (name, email, companyName) => {\n        const updatedUsers = [...users];\n        updatedUsers.unshift(\n            {\n                id: uuidv4(),\n                name: name,\n                email: email,\n                address: {\n                    street: null,\n                    suite: null,\n                    city: null,\n                    zipcode: null,\n                },\n                phone: null,\n                website: null,\n                company: {\n                    name: companyName\n                }\n            });\n        setUsers(updatedUsers);\n        setFilteredUsers(updatedUsers);\n    };\n\n    const handleCloseModal = () => {\n        setIsAddUserModalActive(false);\n    };\n\n    const deleteUser = (userId) => {\n        const updatedUsers = users.filter(el => el.id !== userId);\n        setUsers(updatedUsers);\n        setFilteredUsers(updatedUsers);\n    };\n\n    const resetFilters = () => {\n        setFilters(emptyFilters);\n        setFilteredUsers(users);\n    };\n\n    const isTextEmpty = (text) =>\n        text === null ||\n        text === undefined ||\n        text.trim() === '';\n\n    const filterMatches = (filterText, value) => {\n        if (isTextEmpty(filterText))\n            return true;\n\n        if (isTextEmpty(value))\n            return false;\n\n        return value.toLowerCase().includes(filterText.trim().toLowerCase());\n    };\n\n    const filterUsers = (property, value) => {\n        const updatedFilters = {...filters};\n        updatedFilters[property] = value;\n        setFilters(updatedFilters);\n\n        const filteredUsers = users.filter(user => {\n            if (!filterMatches(updatedFilters.name, user.name))\n                return false;\n\n            if (!filterMatches(updatedFilters.email, user.email))\n                return false;\n\n            if (!filterMatches(updatedFilters.address, user.address.street) &&\n                !filterMatches(updatedFilters.address, user.address.suite) &&\n                !filterMatches(updatedFilters.address, user.address.city) &&\n                !filterMatches(updatedFilters.address, user.address.zipcode))\n                return false;\n\n            if (!filterMatches(updatedFilters.phone, user.phone))\n                return false;\n\n            if (!filterMatches(updatedFilters.website, user.website))\n                return false;\n\n            if (!filterMatches(updatedFilters.company, user.company.name))\n                return false;\n            return true;\n        });\n        setFilteredUsers(filteredUsers);\n    };\n\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Users</h2>\n            {users.length === 0 ? renderLoadUsersButton() : renderAddUserButton()}\n            <table className=\"table table-bordered\">\n                {\n                    users.length !== 0 &&\n                    <thead className=\"thead-light\">\n                    <tr>\n                        <th>\n                            Name\n                            <div className=\"text-nowrap\">\n                                <input type=\"text\"\n                                       value={filters.name || ''}\n                                       onChange={e => filterUsers(userNamePropertyName, e.target.value)}/>\n                                <i className=\"fa fa-filter ml-2\"/>\n                            </div>\n                        </th>\n                        <th>\n                            Email\n                            <div className=\"text-nowrap\">\n                                <input type=\"text\"\n                                       value={filters.email || ''}\n                                       onChange={e => filterUsers(userEmailPropertyName, e.target.value)}/>\n                                <i className=\"fa fa-filter ml-2\"/>\n                            </div>\n                        </th>\n                        <th>\n                            Address\n                            <div className=\"text-nowrap\">\n                                <input type=\"text\"\n                                       value={filters.address || ''}\n                                       onChange={e => filterUsers(userAddressPropertyName, e.target.value)}/>\n                                <i className=\"fa fa-filter ml-2\"/>\n                            </div>\n                        </th>\n                        <th>\n                            Phone\n                            <div className=\"text-nowrap\">\n                                <input type=\"text\"\n                                       value={filters.phone || ''}\n                                       onChange={e => filterUsers(userPhonePropertyName, e.target.value)}/>\n                                <i className=\"fa fa-filter ml-2\"/>\n                            </div>\n                        </th>\n                        <th>\n                            Website\n                            <div className=\"text-nowrap\">\n                                <input type=\"text\"\n                                       value={filters.website || ''}\n                                       onChange={e => filterUsers(userWebsitePropertyName, e.target.value)}/>\n                                <i className=\"fa fa-filter ml-2\"/>\n                            </div>\n                        </th>\n                        <th>\n                            Company\n                            <div className=\"text-nowrap\">\n                                <input type=\"text\"\n                                       value={filters.company || ''}\n                                       onChange={e => filterUsers(userCompanyPropertyName, e.target.value)}/>\n                                <i className=\"fa fa-filter ml-2\"/>\n                            </div>\n                        </th>\n                        <th>\n                        </th>\n                    </tr>\n                    </thead>\n                }\n                <tbody>\n                {\n                    filteredUsers.map(user =>\n                        <GridRow key={user.id}\n                                 user={user}\n                                 deleteUser={deleteUser}\n                                 isTextEmpty={isTextEmpty}/>\n                    )\n                }\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);"],"sourceRoot":""}